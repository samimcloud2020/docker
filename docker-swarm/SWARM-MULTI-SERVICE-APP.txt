docker network create --driver overlay frontend

docker network create --driver overlay backend

docker volume create db-data



docker service create --name vote --network frontend -p 80:80 --replicas 2 bretfisher/examplevotingapp_vote



docker service create --name redis --network frontend redis:3.2



docker service create --name worker --network frontend --network backend bretfisher/examplevotingapp_worker



docker service create --name db --network backend -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_PASSWORD=mypass --mount type=volume,source=db-data,target=/var/lib/postgresql/data postgres:9.4



docker service create --name result -p 5000:80 --network backend bretfisher/examplevotingapp_result

vote(frontend n/w, exposed 80, python)---->redis(frontend n/w, key-value memory store)-->worker(frontend & backend,.net)-->db(backend & frontend, postgres)<---------------------------------result(backend,nodejs, exposed 5000)

 db and result------> backend overlay n/w
 worker-------------> frontend and backend ( con to db and con redis)
vote, redis-----> frontend overlay n/w

docker network create --driver overlay frontend && docker network create --driver overlay backend

- vote
  - bretfisher/examplevotingapp_vote
  - web frontend for users to vote dog/cat
  - ideally published on TCP 80. Container listens on 80
  - on frontend network
  - 2+ replicas of this container


 docker service create --name vote --replicas 3 --network frontend -p 80:80 bretfisher/examplevotingapp_vote

- redis
  - redis:3.2
  - key-value storage for incoming votes
  - no public ports
  - on frontend network
  - 1 replica NOTE VIDEO SAYS TWO BUT ONLY ONE NEEDED
- docker service create --name redis --replicas 1 --network frontend  redis:3.2


- db
  - postgres:9.4
  - one named volume needed, pointing to /var/lib/postgresql/data
  - on backend network
  - 1 replica
  - remember set env for password-less connections -e POSTGRES_HOST_AUTH_METHOD=trust
- docker service create --name db --replicas 1 --network backend --mount type=volume,source=db-data,target=/var/lib/postgresql/data -e POSTGRES_HOST_AUTH_METHOD=trust postgres:9.4


- result
  - bretfisher/examplevotingapp_result
  - web app that shows results
  - runs on high port since just for admins (lets imagine)
  - so run on a high port of your choosing (I choose 5001), container listens on 80
  - on backend network
  - 1 replica
-  docker service create --name result --replicas 1 -p 5001:80 --network backend bretfisher/examplevotingapp_result
