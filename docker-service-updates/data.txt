provides rolling replacement of tasks/containers of services.

limits downtime be careful with prevent downtime.

will replace conatiners for most changes.

create option will usally change, adding -add and -rm to them.

includes rollback and healthcheck options.

also subcommand for scale and rollback:

$ docker service scale web=4

$ docker service rollback web

A stack deploy when pre-existing will issue service updates.

------------------update the image used to newer version----------------
$ docker service update --image myapp:1.2 <serv name>

---------------adding env variable and remove a port----------------------
$ docker service update --env-add NODE_VENV=production --publish-rm 8080
  
  NOTE: --env-add    --env-rm   --publish-rm  --publish-add
----------------------by default update one task at a time, but you can --update-parallelism flag the max num of task you update simultaneously --------

By default the scheduler updates 1 task at a time.
You can pass the --update-parallelism flag to configure the maximum number
of service tasks that the scheduler updates simultaneously.


$ docker service create -p 8088:80 --name svc1  nginx:1.13.7
j8005w4uzwgzhawqjjvtad1ym
overall progress: 1 out of 1 tasks 
1/1: running   [==================================================>] 
verify: Service converged 



[manager1] (local) root@192.168.0.13 ~
$ docker service inspect svc1
[
    {
        "ID": "j8005w4uzwgzhawqjjvtad1ym",
        "Version": {
            "Index": 72
        },
        "CreatedAt": "2023-06-09T14:16:54.896512549Z",
        "UpdatedAt": "2023-06-09T14:16:54.89774505Z",
        "Spec": {
            "Name": "svc1",
            "Labels": {},
            "TaskTemplate": {
                "ContainerSpec": {
                    "Image": "nginx:1.13.7@sha256:edc8182581fdaa985a39b3021836aa09a69f9b966d1a0ff2f338be6f2fbfe238",
                    "Init": false,
                    "StopGracePeriod": 10000000000,
                    "DNSConfig": {},
                    "Isolation": "default"
                },
                "Resources": {
                    "Limits": {},
                    "Reservations": {}
                },
                "RestartPolicy": {
                    "Condition": "any",
                    "Delay": 5000000000,
                    "MaxAttempts": 0
                },
                "Placement": {
                    "Platforms": [
                        {
                            "Architecture": "amd64",
                            "OS": "linux"
                        },
                        {
                            "OS": "linux"
                        },
                        {
                            "Architecture": "arm64",
                            "OS": "linux"
                        },
                        {
                            "Architecture": "386",
                            "OS": "linux"
                        },
                        {
                            "Architecture": "ppc64le",
                            "OS": "linux"
                        },
                        {
                            "Architecture": "s390x",
                            "OS": "linux"
                        }
                    ]
                },
                "ForceUpdate": 0,
                "Runtime": "container"
            },
            "Mode": {
                "Replicated": {
                    "Replicas": 1
                }
            },
            "UpdateConfig": {
                "Parallelism": 1,
                "FailureAction": "pause",
                "Monitor": 5000000000,
                "MaxFailureRatio": 0,
                "Order": "stop-first"
            },
            "RollbackConfig": {
                "Parallelism": 1,
                "FailureAction": "pause",
                "Monitor": 5000000000,
                "MaxFailureRatio": 0,
                "Order": "stop-first"
            },
            "EndpointSpec": {
                "Mode": "vip",
                "Ports": [
                    {
                        "Protocol": "tcp",
                        "TargetPort": 80,
                        "PublishedPort": 8088,
                        "PublishMode": "ingress"
                    }
                ]
            }
        },
        "Endpoint": {
            "Spec": {
                "Mode": "vip",
                "Ports": [
                    {
                        "Protocol": "tcp",
                        "TargetPort": 80,
                        "PublishedPort": 8088,
                        "PublishMode": "ingress"
                    }
                ]
            },
            "Ports": [
                {
                    "Protocol": "tcp",
                    "TargetPort": 80,
                    "PublishedPort": 8088,
                    "PublishMode": "ingress"
                }
            ],
            "VirtualIPs": [
                {
                    "NetworkID": "50a8wjee16f22ri3egn6eykgj",
                    "Addr": "10.0.0.11/24"
                }
            ]
        }
    }
]



[manager1] (local) root@192.168.0.13 ~
$ docker service ls
ID             NAME      MODE         REPLICAS   IMAGE          PORTS
j8005w4uzwgz   svc1      replicated   1/1        nginx:1.13.7   *:8088->80/tcp


$ docker service scale svc1=5
svc1 scaled to 5
overall progress: 5 out of 5 tasks 
1/5: running   [==================================================>] 
2/5: running   [==================================================>] 
3/5: running   [==================================================>] 
4/5: running   [==================================================>] 
5/5: running   [==================================================>] 
verify: Service converged 


[manager1] (local) root@192.168.0.13 ~
$ docker service update --image nginx:1.13.6 svc1
svc1
overall progress: 5 out of 5 tasks 
1/5: running   [==================================================>] 
2/5: running   [==================================================>] 
3/5: running   [==================================================>] 
4/5: running   [==================================================>] 
5/5: running   [==================================================>] 
verify: Service converged 

$ docker service update --publish-rm 8088 --publish-add 9090:80 svc1
svc1
overall progress: 5 out of 5 tasks 
1/5: running   [==================================================>] 
2/5: running   [==================================================>] 
3/5: running   [==================================================>] 
4/5: running   [==================================================>] 
5/5: running   [==================================================>] 
verify: Service converged 


[manager1] (local) root@192.168.0.13 ~
$ docker service update --force svc1   -------------------------->
svc1
overall progress: 3 out of 5 tasks 
1/5: running   [==================================================>] 
2/5: running   [==================================================>] 
3/5: running   [==================================================>] 
4/5: ready     [======================================>            ] 
5/5:   
