version: "3"
services:
  redis:
    image: redis:alpine
    ports:
      - "6379"
    networks:
      - "frontend"
    configs:
      - source: redis-healthcheck
        target: /usr/local/bin/redis-healthcheck
        mode: 0555
    deploy:
      replicas: 1
      update_config:
        failure_action: rollback
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        
        
  db:
    image: postgres:9.4
    environment:
        POSTGRES_PASSWORD: mypass
        POSTGRES_HOST_AUTH_METHOD: trust
        PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - "db-data:/var/lib/postgresql/data"
    networks:
      - "backend"
    configs:
      - source: postgres-healthcheck
        target: /usr/local/bin/postgres-healthcheck
        mode: 0555
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      update_config:
        failure_action: rollback
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure  
        
    
  vote:
    image: bretfisher/examplevotingapp_vote
    ports:
      - "5000:80"
    networks:
      - "frontend"
    depends_on:
      - "redis"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost || exit 1 " ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      failure_action: rollback 
      replicas: 2
      update_config:
        parallelism: 1
      restart_policy:
        condition: on-failure
  result:
    image: bretfisher/examplevotingapp_result
    ports:
      - "5001:80"
    networks:
      - "backend"
    depends_on:
      - "db"
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
  worker:
    image: bretfisher/examplevotingapp_worker
    networks:
      - "frontend"
      - "backend"
    deploy:
      mode: replicated
      replicas: 1
      labels: [APP=VOTING]
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      placement:
        constraints: [ node.role == manager]
        
networks:
    backend:
        driver: overlay
    frontend:
        driver: overlay
volumes:
    db-data:
        driver: local
configs:
  redis-healthcheck:
    file: ./redis-healthcheck
  postgres-healthcheck:
    file: ./postgres-healthcheck
